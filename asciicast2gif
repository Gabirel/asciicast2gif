#!/bin/bash

#
#                 _ _               _   ____       _  __ 
#   __ _ ___  ___(_|_) ___ __ _ ___| |_|___ \ __ _(_)/ _|
#  / _` / __|/ __| | |/ __/ _` / __| __| __) / _` | | |_ 
# | (_| \__ \ (__| | | (_| (_| \__ \ |_ / __/ (_| | |  _|
#  \__,_|___/\___|_|_|\___\__,_|___/\__|_____\__, |_|_|  
#                                            |___/       
#
# Version 0.0.2
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Alberto Pettarin (alberto@albertopettarin.it)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

### constants ###

# asciicast2gif version
VERSION="0.0.2"

# extra parameters to gifsicle
GIFSICLE_PARAMS="--colors=256 --optimize=3"



### parse arguments ###

if [ "$#" -lt 1 ]
then
    echo ""
    echo "NAME"
    echo "    asciicast2gif - convert an asciicast (asciinema JSON file) to an animated GIF file"
    echo ""
    echo "SYNOPSIS"
    echo "    ./asciicast2gif ASCIICAST.json [GIF_FILE_NAME] [OPTIONS]"
    echo ""
    echo "OPTIONS"
    echo "    --fps=NUM : generate gif with NUM frames per second (default: 10)"
    echo "    --head=NUM : discard first NUM screenshots (default: 0)"
    echo "    --keep : do not delete the temporary directory (default: delete)"
    echo "    --nogif : do not generate GIF file (default: generate)"
    echo "    --port=NUM : use port NUM for the local HTTP server (default: 8000)"
    echo "    --size=[small|medium|big] : set player size (default: small)"
    echo "    --speed=VAL : set player speed to VAL (default: 1)"
    echo "    --tail=NUM : discard last NUM screenshots (default: 0)"
    echo "    --theme=[asciinema|monokai|tango|solarized-dark|solarized-light] : use player theme (default: asciinema)"
    echo "    --server=[py2|py3|py3.5|ruby|none] : use the given local HTTP server (default: py2)"
    echo ""
    echo "EXAMPLES"
    echo "    $ ./asciicast2gif your.json               => generate your.json.gif"
    echo "    $ ./asciicast2gif your.json foo.gif       => generate foo.gif"
    echo "    $ ./asciicast2gif your.json --fps=20      => generate your.json.gif at 20 frames/s"
    echo "    $ ./asciicast2gif your.json --speed=1.5   => play asciicast at 1.5x speed"
    echo "    $ ./asciicast2gif your.json --head=3      => discard first 3 screenshots"
    echo "    $ ./asciicast2gif your.json --tail=5      => discard last 5 screenshots"
    echo "    $ ./asciicast2gif your.json --server=ruby => use Ruby to start local HTTP server"
    echo "    $ ./asciicast2gif your.json --server=none => local HTTP server is already running on port 8000"
    echo "    $ ./asciicast2gif your.json --size=big    => set the player size to big"
    echo "    $ ./asciicast2gif your.json --port=5000   => use local HTTP server port 5000"
    echo "    $ ./asciicast2gif your.json --theme=tango => set the player theme to tango"
    echo ""
    exit 2
fi

ASCIICAST_FILE="$1"

GIF_FILE_NAME="$ASCIICAST_FILE"".gif"
if [ "$#" -ge 2 ]
then
    if [[ "$2" != --* ]]
    then
        GIF_FILE_NAME="$2"
    fi
fi
GIF_FILE=$(cd "$(dirname "$GIF_FILE_NAME")"; pwd)/$(basename "$GIF_FILE_NAME")

# set option default values
DISCARD_FIRST=0     # discard first NUM screenshots
DISCARD_LAST=0      # discard last NUM screenshots
FONT_SIZE="small"   # player font size
FRAME_RATE=10       # frame rate (screenshots/s)
GENERATE_GIF="1"    # generate gif
KEEP="0"            # keep (1) or delete (0) temporary directory
PORT=8000           # run simple HTTP server on this port
SERVER="py2"        # server name
SPEED="1"           # player speed
THEME="asciinema"   # player theme

# set option values if specified
for ARG in "$@"
do
    case $ARG in
        --head=*)
        DISCARD_FIRST="${ARG#*=}"
        shift
        ;;
        --tail=*)
        DISCARD_LAST="${ARG#*=}"
        shift
        ;;
        --fps=*)
        FRAME_RATE="${ARG#*=}"
        shift
        ;;
        --keep)
        KEEP="1"
        shift
        ;;
        --nogif)
        GENERATE_GIF="0"
        shift
        ;;
        --port=*)
        PORT="${ARG#*=}"
        shift
        ;;
        --server=*)
        SERVER="${ARG#*=}"
        shift
        ;;
        --size=*)
        FONT_SIZE="${ARG#*=}"
        shift
        ;;
        --speed=*)
        SPEED="${ARG#*=}"
        shift
        ;;
        --theme=*)
        THEME="${ARG#*=}"
        shift
        ;;
    esac
done

#echo "IF $ASCIICAST_FILE"
#echo "OF $GIF_FILE_NAME"
#echo "GG $GENERATE_GIF"
#echo "KE $KEEP"
#echo "DF $DISCARD_FIRST"
#echo "DL $DISCARD_LAST"
#echo "FR $FRAME_RATE"
#echo "PO $PORT"
#echo "SE $SERVER"
#echo "SP $SPEED"
#echo "TH $THEME"

GIFSICLE_DELAY=`echo "100 / $FRAME_RATE" | bc`

### run ###

START_DIR=`pwd`

if [ ! -e "$ASCIICAST_FILE" ]
then
    echo "[ERRO] File $ASCIICAST_FILE does not exit"
    exit 1
fi

if [ "$SERVER" != "none" ]
then
    if [ "$SERVER" == "py2" ]
    then
        echo "[INFO] Starting Python 2 SimpleHTTPServer on port $PORT"
        python -m SimpleHTTPServer "$PORT" > /dev/null 2> /dev/null &
    elif [ "$SERVER" == "py3" ]
    then
        echo "[INFO] Starting Python 3 http.server on port $PORT"
        python -m http.server "$PORT" > /dev/null 2> /dev/null &
    elif [ "$SERVER" == "py3.5" ]
    then
        echo "[INFO] Starting Python 3.5 http.server on port $PORT"
        python3.5 -m http.server "$PORT" > /dev/null 2> /dev/null &
    elif [ "$SERVER" == "ruby" ]
    then
        echo "[INFO] Starting Ruby httpd on port $PORT"
        ruby -run -e httpd . -p "$PORT" > /dev/null 2> /dev/null &
    fi
    SERVER_PID=$!
    sleep 1
    if ! ps -p $SERVER_PID > /dev/null
    then
        echo "[ERRO] Unable to run a simple HTTP server"
        echo "[ERRO] asciicast2gif needs a local HTTP server running on port $PORT"
        echo "[ERRO] If you have a local HTTP server, start it and run asciicast2gif with the 'none' option"
        echo "[ERRO] Otherwise, please install python or ruby"
        exit 1
    fi
fi

# create temporary directory
TMP_DIR="$(mktemp -d -t asciicast2gif.XXXXXXXX)"
echo "[INFO] Temporary directory is $TMP_DIR"

# create page.patched.html
PAGE_TEMPLATE="page.template.html"
PAGE_PATCHED="page.patched.html"
PLACEHOLDER="\"demo.json\""
REPLACEMENT="\"$ASCIICAST_FILE\", { \"fontSize\": \"$FONT_SIZE\", \"speed\": $SPEED, \"theme\": \"$THEME\" }"
cat "$PAGE_TEMPLATE" | sed -e "s/$PLACEHOLDER/$REPLACEMENT/" > "$PAGE_PATCHED"

# read width and height of the asciicast file
# TODO parse JSON properly
WIDTH=`cat "$ASCIICAST_FILE" | tr "," "\n" | grep "width"  | head -n1 | cut -d ":" -f 2 | tr -d " ,"`
HEIGHT=`cat "$ASCIICAST_FILE" | tr "," "\n" | grep "height" | head -n1 | cut -d ":" -f 2 | tr -d " ,"`
#
# NOTE this depends on asciinema-player CSS/JS
# small  =>  7x 16x
# medium => 11x 24x
# big    => 14x 32x
#
case $FONT_SIZE in
    small)
    WIDTH_MULT=7
    HEIGHT_MULT=16
    ;;
    medium)
    WIDTH_MULT=11
    HEIGHT_MULT=24
    ;;
    big)
    WIDTH_MULT=14
    HEIGHT_MULT=32
    ;;
esac
WIDTH_PX=`echo "$WIDTH * $WIDTH_MULT" | bc`
HEIGHT_PX=`echo "$HEIGHT * $HEIGHT_MULT" | bc`

# run phantomjs to take screenshots
# while asciinema-player runs
phantomjs screenshot.js "http://localhost:$PORT/$PAGE_PATCHED" "$WIDTH_PX" "$HEIGHT_PX" "$TMP_DIR" "$FRAME_RATE"
if [ "$?" != 0 ]
then
    echo "[ERRO] Removing $TMP_DIR"
    rm -rf $TMP_DIR
    if [ "$SERVER" != "none" ]
    then
        echo "[ERRO] Terminating simple HTTP server"
        kill $SERVER_PID
        wait $SERVER_PID 2> /dev/null
    fi
    rm $PAGE_PATCHED
    exit 1
fi

if [ "$SERVER" != "none" ]
then
    echo "[INFO] Terminating simple HTTP server"
    kill $SERVER_PID
    wait $SERVER_PID 2> /dev/null
fi
rm $PAGE_PATCHED

echo "[INFO] Generating GIF..."
cd "$TMP_DIR"

# remove the last DISCARD_LAST snapshots
LAST_FILES=`ls | tail -n $DISCARD_LAST`
for CURRENT_FILE in $LAST_FILES
do
    #echo "[INFO] Removing file $CURRENT_FILE"
    rm "$CURRENT_FILE"
done

# remove the first screenshots, as they have a wrong size
# TODO improve screenshot.js to avoid this
LAST_FILE=`ls | tail -n 1`
LAST_FILE_SIZE=`file $LAST_FILE | cut -d "," -f 2 | tr -d " "`
for CURRENT_FILE in *.png
do
    CURRENT_FILE_SIZE=`file $CURRENT_FILE | cut -d "," -f 2 | tr -d " "`
    if [ "$CURRENT_FILE_SIZE" != "$LAST_FILE_SIZE" ]
    then
        #echo "[INFO] Removing file $CURRENT_FILE (has size $CURRENT_FILE_SIZE instead of $LAST_FILE_SIZE)"
        rm "$CURRENT_FILE"
    fi
done

# remove the first DISCARD_FIRST snapshots
FIRST_FILES=`ls | head -n $DISCARD_FIRST`
for CURRENT_FILE in $FIRST_FILES
do
    #echo "[INFO] Removing file $CURRENT_FILE"
    rm "$CURRENT_FILE"
done

# generate GIF
if [ "$GENERATE_GIF" == "1" ]
then
    convert -loop 0 *.png gif:- | gifsicle --delay $GIFSICLE_DELAY $GIFSICLE_PARAMS > "$GIF_FILE" 2> /dev/null
else
    echo "[INFO] Option '--nogif' specified: not generating GIF file"
fi

cd $START_DIR

# delete temporary directory
if [ "$KEEP" == "0" ]
then
    #echo "[INFO] Removing $TMP_DIR"
    rm -rf $TMP_DIR
else
    echo "[INFO] Option '--keep' specified: not removing $TMP_DIR"
fi

if [ "$GENERATE_GIF" == "1" ]
then
    echo "[INFO] Created $GIF_FILE"
fi
exit 0




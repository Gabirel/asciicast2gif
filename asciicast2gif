#!/bin/bash

#
#                 _ _               _   ____       _  __ 
#   __ _ ___  ___(_|_) ___ __ _ ___| |_|___ \ __ _(_)/ _|
#  / _` / __|/ __| | |/ __/ _` / __| __| __) / _` | | |_ 
# | (_| \__ \ (__| | | (_| (_| \__ \ |_ / __/ (_| | |  _|
#  \__,_|___/\___|_|_|\___\__,_|___/\__|_____\__, |_|_|  
#                                            |___/       
#
# Version 0.0.1
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Alberto Pettarin (alberto@albertopettarin.it)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

### constants ###

# asciicast2gif version
VERSION="0.0.1"

# run simple HTTP server on this port
PORT=8000

# extra parameters to gifsicle
GIFSICLE_PARAMS="--colors=256 --optimize=3"



### parse arguments ###

if [ "$#" -lt 1 ]
then
    echo ""
    echo "NAME"
    echo "    asciicast2gif - convert an asciicast (asciinema JSON file) to an animated GIF file"
    echo ""
    echo "SYNOPSIS"
    echo "    ./asciicast2gif ASCIICAST.json [GIF_FILE_NAME] [FRAME_RATE] [DISCARD_FRAMES] [py2|py3|ruby|none]"
    echo ""
    echo "REQUIREMENTS"
    echo "    1. phantomjs; 2. convert (imagemagick); 3. gifsicle; 4. python or ruby or a local HTTP server running on port 8000"
    echo ""
    echo "EXAMPLES"
    echo "    $ ./asciicast2gif your.json                   => generate your.json.gif at 10 fps"
    echo "    $ ./asciicast2gif your.json foo.gif           => generate foo.gif at 10 fps"
    echo "    $ ./asciicast2gif your.json foo.gif 20        => generate foo.gif at 20 fps"
    echo "    $ ./asciicast2gif your.json foo.gif 10 5      => generate foo.gif at 10 fps discarding last 5 screenshots"
    echo "    $ ./asciicast2gif your.json foo.gif 10 0 ruby => use Ruby instead of Python 2 to start a local HTTP server"
    echo "    $ ./asciicast2gif your.json foo.gif 10 0 none => a local HTTP server is already running on port 8000"
    echo ""
    exit 2
fi

ASCIICAST_FILE="$1"

GIF_FILE_NAME="$ASCIICAST_FILE"".gif"
if [ "$#" -ge 2 ]
then
    GIF_FILE_NAME="$2"
fi
GIF_FILE=$(cd "$(dirname "$GIF_FILE_NAME")"; pwd)/$(basename "$GIF_FILE_NAME")

FRAME_RATE=10
if [ "$#" -ge 3 ]
then
    FRAME_RATE="$3"
fi
GIFSICLE_DELAY=`echo "100 / $FRAME_RATE" | bc`

DISCARD_LAST=0
if [ "$#" -ge 4 ]
then
    DISCARD_LAST="$4"
fi

SERVER="py2"
if [ "$#" -ge 5 ]
then
    SERVER="$5"
fi



### run ###

START_DIR=`pwd`

if [ ! -e "$ASCIICAST_FILE" ]
then
    echo "[ERRO] File $ASCIICAST_FILE does not exit"
    exit 1
fi

if [ "$SERVER" != "none" ]
then
    if [ "$SERVER" == "py2" ]
    then
        echo "[INFO] Starting Python 2 SimpleHTTPServer on port $PORT"
        python -m SimpleHTTPServer "$PORT" > /dev/null 2> /dev/null &
    elif [ "$SERVER" == "py3" ]
    then
        echo "[INFO] Starting Python 3 http.server on port $PORT"
        python -m http.server "$PORT" > /dev/null 2> /dev/null &
    elif [ "$SERVER" == "ruby" ]
    then
        echo "[INFO] Starting Ruby httpd on port $PORT"
        ruby -run -e httpd . -p "$PORT" > /dev/null 2> /dev/null &
    fi
    SERVER_PID=$!
    sleep 1
    if ! ps -p $SERVER_PID > /dev/null
    then
        echo "[ERRO] Unable to run a simple HTTP server"
        echo "[ERRO] asciicast2gif needs a local HTTP server running on port $PORT"
        echo "[ERRO] If you have a local HTTP server, start it and run asciicast2gif with the 'none' option"
        echo "[ERRO] Otherwise, please install python or ruby"
        exit 1
    fi
fi

# create temporary directory
TMP_DIR="$(mktemp -d -t asciicast2gif.XXXXXXXX)"
echo "[INFO] Temporary directory is $TMP_DIR"

# create page.patched.html
PAGE_TEMPLATE="page.template.html"
PAGE_PATCHED="page.patched.html"
cat "$PAGE_TEMPLATE" | sed -e "s/demo.json/$ASCIICAST_FILE/" > "$PAGE_PATCHED"

# read width and height of the asciicast file
# TODO parse JSON properly
WIDTH=`grep "width" "$ASCIICAST_FILE" | head -n1 | cut -d ":" -f 2 | tr -d " ,"`
HEIGHT=`grep "height" "$ASCIICAST_FILE" | head -n1 | cut -d ":" -f 2 | tr -d " ,"`

# run phantomjs to take screenshots
# while asciinema-player runs
phantomjs screenshot.js "http://localhost:$PORT/$PAGE_PATCHED" "$WIDTH" "$HEIGHT" "$TMP_DIR" "$FRAME_RATE"
if [ "$?" != 0 ]
then
    echo "[ERRO] Removing $TMP_DIR"
    rm -rf $TMP_DIR
    if [ "$SERVER" != "none" ]
    then
        echo "[ERRO] Terminating simple HTTP server"
        kill $SERVER_PID
        wait $SERVER_PID 2> /dev/null
    fi
    rm $PAGE_PATCHED
    exit 1
fi

if [ "$SERVER" != "none" ]
then
    echo "[INFO] Terminating simple HTTP server"
    kill $SERVER_PID
    wait $SERVER_PID 2> /dev/null
fi
rm $PAGE_PATCHED

echo "[INFO] Generating GIF..."
cd "$TMP_DIR"

# remove the last DISCARD_LAST snapshots
LAST_FILES=`ls | tail -n $DISCARD_LAST`
for CURRENT_FILE in $LAST_FILES
do
    #echo "[INFO] Removing file $CURRENT_FILE"
    rm "$CURRENT_FILE"
done

# remove the first screenshots, as they have a wrong size
# TODO improve screenshot.js to avoid this
LAST_FILE=`ls | tail -n 1`
LAST_FILE_SIZE=`file $LAST_FILE | cut -d "," -f 2 | tr -d " "`
for CURRENT_FILE in *.png
do
    CURRENT_FILE_SIZE=`file $CURRENT_FILE | cut -d "," -f 2 | tr -d " "`
    if [ "$CURRENT_FILE_SIZE" != "$LAST_FILE_SIZE" ]
    then
        #echo "[INFO] Removing file $CURRENT_FILE (has size $CURRENT_FILE_SIZE instead of $LAST_FILE_SIZE)"
        rm "$CURRENT_FILE"
    fi
done

# generate GIF
convert -loop 0 *.png gif:- | gifsicle --delay $GIFSICLE_DELAY $GIFSICLE_PARAMS > "$GIF_FILE" 2> /dev/null
cd $START_DIR

#echo "[INFO] Removing $TMP_DIR"
rm -rf $TMP_DIR

echo "[INFO] Created $GIF_FILE"
exit 0



